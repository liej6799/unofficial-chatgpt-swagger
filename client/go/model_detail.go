/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Detail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Detail{}

// Detail struct for Detail
type Detail struct {
	Message string `json:"message"`
	Type string `json:"type"`
	Param interface{} `json:"param,omitempty"`
	Code string `json:"code"`
}

// NewDetail instantiates a new Detail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetail(message string, type_ string, code string) *Detail {
	this := Detail{}
	this.Message = message
	this.Type = type_
	this.Code = code
	return &this
}

// NewDetailWithDefaults instantiates a new Detail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailWithDefaults() *Detail {
	this := Detail{}
	return &this
}

// GetMessage returns the Message field value
func (o *Detail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Detail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Detail) SetMessage(v string) {
	o.Message = v
}

// GetType returns the Type field value
func (o *Detail) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Detail) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Detail) SetType(v string) {
	o.Type = v
}

// GetParam returns the Param field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Detail) GetParam() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Param
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Detail) GetParamOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Param) {
		return nil, false
	}
	return &o.Param, true
}

// HasParam returns a boolean if a field has been set.
func (o *Detail) HasParam() bool {
	if o != nil && IsNil(o.Param) {
		return true
	}

	return false
}

// SetParam gets a reference to the given interface{} and assigns it to the Param field.
func (o *Detail) SetParam(v interface{}) {
	o.Param = v
}

// GetCode returns the Code field value
func (o *Detail) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Detail) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Detail) SetCode(v string) {
	o.Code = v
}

func (o Detail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Detail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	if o.Param != nil {
		toSerialize["param"] = o.Param
	}
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

type NullableDetail struct {
	value *Detail
	isSet bool
}

func (v NullableDetail) Get() *Detail {
	return v.value
}

func (v *NullableDetail) Set(val *Detail) {
	v.value = val
	v.isSet = true
}

func (v NullableDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetail(val *Detail) *NullableDetail {
	return &NullableDetail{value: val, isSet: true}
}

func (v NullableDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


