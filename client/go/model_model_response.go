/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelResponse{}

// ModelResponse struct for ModelResponse
type ModelResponse struct {
	Models []Model `json:"models,omitempty"`
}

// NewModelResponse instantiates a new ModelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelResponse() *ModelResponse {
	this := ModelResponse{}
	return &this
}

// NewModelResponseWithDefaults instantiates a new ModelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelResponseWithDefaults() *ModelResponse {
	this := ModelResponse{}
	return &this
}

// GetModels returns the Models field value if set, zero value otherwise.
func (o *ModelResponse) GetModels() []Model {
	if o == nil || IsNil(o.Models) {
		var ret []Model
		return ret
	}
	return o.Models
}

// GetModelsOk returns a tuple with the Models field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResponse) GetModelsOk() ([]Model, bool) {
	if o == nil || IsNil(o.Models) {
		return nil, false
	}
	return o.Models, true
}

// HasModels returns a boolean if a field has been set.
func (o *ModelResponse) HasModels() bool {
	if o != nil && !IsNil(o.Models) {
		return true
	}

	return false
}

// SetModels gets a reference to the given []Model and assigns it to the Models field.
func (o *ModelResponse) SetModels(v []Model) {
	o.Models = v
}

func (o ModelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Models) {
		toSerialize["models"] = o.Models
	}
	return toSerialize, nil
}

type NullableModelResponse struct {
	value *ModelResponse
	isSet bool
}

func (v NullableModelResponse) Get() *ModelResponse {
	return v.value
}

func (v *NullableModelResponse) Set(val *ModelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelResponse(val *ModelResponse) *NullableModelResponse {
	return &NullableModelResponse{value: val, isSet: true}
}

func (v NullableModelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


